/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import javafx.scene.control.TableView;
import javax.swing.JTable;
import x.FXMLDocumentController;
//import view.ExploitStatusTableModel;


/**
 *
 * @author Dragon
 */
public class ExploitStatusGetter extends HackHuntClass implements Runnable
{
    private TableView outputTable;
    private String token;
    private FXMLDocumentController parent;
    
    public ExploitStatusGetter(String token)
    {
        this.token = token;
        initProperties();
        configureLogLevels();
    }
    
    public ExploitStatusGetter(String token, FXMLDocumentController parent)
    {
        this.token = token;
        initProperties();
        configureLogLevels();
        this.parent = parent;
    }
    
    public void configureForTable(TableView outputTable)
    {
        this.outputTable = outputTable;
    }
    
    public String getToken()
    {
        return token;
    }

    @Override
    public void run() 
    {
        log.log(INFO,"ExploitStatusGetter running");
        String message = "getExploitStatus;token";
        message = message.replace("token", token);
        log.log(DEBUG,"Sending message");
        String response = sendMessage(message);
        log.log(DEBUG, "Response received");
        log.log(DEBUG,"Response: " + response);
        if(outputTable != null)
        {            
            log.log(DEBUG,"TableView configured");
            if(response.contains("SUCCESS:"))
            {
                String announcement = response.split("SUCCESS: ")[1];                
                String[] entries = announcement.split(";");
                parent.populateExploitsTable(entries);
             
                 
//                String selection = "";
//                if(outputTable.getSelectedRow() != -1) 
//                {
//                    selection = outputTable.getValueAt(outputTable.getSelectedRow(), 0).toString();
//                }
//                Object[][] data = null;
//                String[] columnNames = {"Vuln","Status"};
//                ExploitStatusTableModel exploitStatusTableModel = new ExploitStatusTableModel(data,columnNames)
//                {
//                    @Override
//                   /**
//                    * defines what type of content is in each column, for use when sorting
//                    */
//                    public Class getColumnClass(int column)
//                    {
//                        if(getRowCount() < 1)
//                        {
//                            //do nothing
//                            return String.class;
//                        }
//                        else
//                        {
//                            return getValueAt(0, column).getClass();
//                        }                
//                    }
//                };
//                for(String s : entries)
//                {
//                    log.log(DEBUG, "adding to model");
//                    exploitStatusTableModel.addExploitOrPatch(s.split(",")[0], s.split(",")[1], s.split(",")[2]);
//                }
//                
//                outputTable.setModel(exploitStatusTableModel);
//                //outputTable.getRowSorter().toggleSortOrder(0); //TODO this doesnt work, it hangs if I enable this
//                outputTable.getColumnModel().getColumn(1).setPreferredWidth(40);
//                for(int i = 0; i < outputTable.getRowCount() ; i++) 
//                {
//                    if(selection.equalsIgnoreCase(outputTable.getValueAt(i, 0).toString())) 
//                    {
//                        outputTable.setRowSelectionInterval(i, i);
//                        outputTable.setColumnSelectionInterval(0, 0);
//                    }
//                }    
            }
        }
        else
        {
            System.out.println(response);
        }        
    }
}
