/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package control;

import model.HackHuntClass;
import util.Constants;
import util.InputValidator;

/**
 *
 * @author Dragon
 */
public class ExploitHandler extends HackHuntClass
{
    private InputValidator inputValidator = new InputValidator();
    
    public ExploitHandler()
    {
        initProperties();
        configureLogLevels();
    }
    
    public String generateExploit(String token, String vulnerability)
    {
        String response = "ERROR: ";
        if(inputValidator.isValidInput(Constants.ALLOWEDINTOKEN, token))
        {
            if(inputValidator.isValidInput(Constants.ALLOWEDINSTRINGS, vulnerability))
            {
                response = sendMessage("generateExploit;"+token+";"+vulnerability);
            }            
            else
            {   
                log.log(DEBUG,"Invalid character in vulnerability ID");
                response += "invalid character in vulnerability ID";
            }
        }
        else
        {
            log.log(DEBUG,"Invalid character in token");
            response += "invalid token";
        }
        return response;     
    }
    
    public String generatePatch(String token, String vulnerability)
    {
        String response = "ERROR: ";
        if(inputValidator.isValidInput(Constants.ALLOWEDINTOKEN, token))
        {
            if(inputValidator.isValidInput(Constants.ALLOWEDINSTRINGS, vulnerability))
            {
                response = sendMessage("generatePatch;"+token+";"+vulnerability);
            }            
            else
            {   
                log.log(DEBUG,"Invalid character in vulnerability ID");
                response += "invalid character in vulnerability ID";
            }
        }
        else
        {
            log.log(DEBUG,"Invalid character in token");
            response += "invalid token";
        }
        return response;     
    }
        
    public String attack(String token, String vulnerability, String username)
    {
        String response = "ERROR: ";
        if(inputValidator.isValidInput(Constants.ALLOWEDINTOKEN, token))
        {
            if(inputValidator.isValidInput(Constants.ALLOWEDINSTRINGS, vulnerability))
            {
                if(inputValidator.isValidInput(Constants.ALLOWEDINUSERNAME, username))
                {
                    response = sendMessage("attackTarget;"+token+";"+vulnerability+";"+username);
                }
                else
                {   
                    log.log(DEBUG,"Invalid character in username");
                    response += "invalid character in username";
                }
            }            
            else
            {   
                log.log(DEBUG,"Invalid character in vulnerability ID");
                response += "invalid character in vulnerability ID";
            }
        }
        else
        {
            log.log(DEBUG,"Invalid character in token");
            response += "invalid token";
        }
        return response;     
    }
    
    public String getAvailableExploitsForService(String token, String username, String vulnerability)
    {
        String response = "ERROR: ";
        if(inputValidator.isValidInput(Constants.ALLOWEDINTOKEN, token))
        {
            if(inputValidator.isValidInput(Constants.ALLOWEDINUSERNAME, username))
            {
                if(inputValidator.isValidInput(Constants.ALLOWEDINSTRINGS, vulnerability))
                {
                    response = sendMessage("isExploitAvailable;"+token+";"+username+";"+vulnerability);
                }
                else
                {
                    log.log(DEBUG,"Invalid character in vulnerability");
                    response += "invalid character in vulnerability";
                }
            }            
            else
            {   
                log.log(DEBUG,"Invalid character in username");
                response += "invalid character in username";
            }
        }
        else
        {
            log.log(DEBUG,"Invalid character in token");
            response += "invalid token";
        }
        return response;     
    }
}
